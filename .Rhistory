flights <- mutate(flights, gain = arr_delay - dep_delay)
ncol(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -gain)
View(head(flights))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, gain)
View(head(flights))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain)
flights <- flights %>% mutate(gain = arr_delay - dep_delay) %>% arrange(-(gain))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.sea <- fligths %>% select(origin, dest, gain) %>% filter(dest == 'SEA')
== '
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.sea <- fligths %>% select(origin, dest, gain) %>% filter(dest == 'SEA')
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.sea <- flights %>% select(origin, dest, gain) %>% filter(dest == 'SEA')
# On average, did flights to SeaTac gain or loose time?
mean(to.sea$gain, na.rm = TRUE)
View(nycflights13)
View('nycflights13')
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
View('nycflights13')
View(nycflights13)
nycflights13
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
nycflights13
# What was the average department delay in each month?
dep.delay.by.month <- flights  %>%
group_by(month) %>%
summary(delay = mean(dep_delay, na.rm = TRUE))
dep.delay.by.month
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
nycflights13
flights
View(flights)
# What was the average department delay in each month?
dep.delay.by.month <- flights  %>%
group_by(month) %>%
summary(delay = mean(dep_delay, na.rm = TRUE))
dep.delay.by.month
View(flights)
# What was the average department delay in each month?
dep.delay.by.month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
dep.delay.by.month
# Which month had the greatest average departure delay?
filter(dep.delay.by.month, delay == max(delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# 'plot()' function
plot(dep.delay.by.month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# 'plot()' function
plot(dep.delay.by.month)
View(dep.delay.by.month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# 'plot()' function
plot(dep.delay.by.month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_dealy, na.rm = TRUE)) %>%
arrange(-mean.arr_delays)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_dealy, na.rm = TRUE)) %>%
arrange(-mean.arr_delays)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-mean.arr_delays)
arr.delay.by.month
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
filter(mean.arr_delay max(mean.arr_delays))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
filter(mean.arr_delay max(mean.arr_delays))
arr.delay.by.month
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
filter(mean.arr_delay max(mean.arr_delays))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
filter(mean.arr_delays == max(mean.arr_delays))
arr.delay.by.month
arr.delay.by.month
View(arr.delay.by.month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE))
filter(mean.arr_delays == max(mean.arr_delays))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE))
arr.delay.by.month
filter(arr.delary.by.month, mean.arr_delays == max(mean.arr_delays))
filter(arr.delay.by.month, mean.arr_delays == max(mean.arr_delays))
arr.delay.by.month
filter(arr.delay.by.month, mean.arr_delays == max(mean.arr_delays))
arr.delay.by.month
filter(arr.delay.by.month, mean.arr_delays == max(mean.arr_delays))
# Which month had the greatest average departure delay?
filter(dep.delay.by.month, delay == max(delay))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE))
arr.delay.by.month
filter(arr.delay.by.month, mean.arr_delays == max(mean.arr_delays))
x <- filter(arr.delay.by.month, mean.arr_delays == max(mean.arr_delays))
View(x)
max(mean.arr_delays)
max(arr.delay.by.month$mean.arr_delays)
max(arr.delay.by.month$mean.arr_delays)
min(arr.delay.by.month$mean.arr_delays)
arr.delay.by.month
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-mean.arr_delays)
arr.delay.by.month
# You can look up these airports in the `airports` data frame!
airports
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
arr.delay.by.month <- flights %>%
group_by(dest) %>%
summarize(mean.arr_delays = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-mean.arr_delays)
arr.delay.by.month
arr.delay.by.month[1]
arr.delay.by.month[1, ]
airports
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr.delay.by.month$dest[1])
install.packages("httr")
library("httr")
GET("https://ischool.uw.edu/")
query.params <- list(q = "informatics")
GET("https://www.google.com/search", query = query.params)
GET("https://www.google.com/searchajskldfj", query = query.params)
GET("https://www.google.com/search", query = query.params)
response <- GET("https://ischool.uw.edu/")
body <- content(response, "text")
body
response = GET(paste0(base.uri, resource))
base.uri <- GET("https://api.github.com")
resource <-("/emojis")
response = GET(paste0(base.uri, resource))
response = GET(paste0(base.uri, resource)
body <- content(response, "text")
base.uri = GET("https://api.github.com")
resource = "/emojis"
response <- GET(paste0(base.uri, resource)
body
base.uri <= GET("https://api.github.com")
resource <= "/emojis"
base.uri <= GET("https://api.github.com")
base.uri = GET("https://api.github.com")
resource = "/emojis"
response <- GET(paste0(base.uri, resource)
body
response <- GET(paste0(base.uri, resource))
response = GET(paste0(base.uri, resource))
base.uri = GET("https://api.github.com")
base.uri = ("https://api.github.com")
resource = "/emojis"
response = GET(paste0(base.uri, resource))
body <- content(response, "text")
body
install.packages("jsonlite")
library("jsonlite")
json <- '{"first_name":"Ada","job":"Programmer","pets":["rover","fluffy"]}
json <- '{"first_name":"Ada","job":"Programmer","pets":["rover","fluffy"]}'
ada <- fromJSON(json)
json <- '{"first_name":"Ada","job":"Programmer","pets":["rover","fluffy"]}'
ada <- fromJSON(json)
ada
ada$first_name
lists <- fromJSON(body)
lists
is.list(lists)
emojis <- fromJSON(body)
is.list(emojis)
emojis[['+1']]
response <- GET(uri)body.data <- fromJSON(content(response, "text"))
# a GitHub search for
`dplyr`uri <- "https://api.github.com/search/repositories?q=dplyr"
response <- GET(uri)body.data <- fromJSON(content(response, "text"))
# extract and parse# is it a data frame already?
is.data.frame(body.data)  # FALSE
# inspect the data!
str(body.data)
# view as a formatted string
names(body.data)  # view the tag name
# a GitHub search for
`dplyr`uri <- "https://api.github.com/search/repositories?q=dplyr"
# a GitHub search for
uri <- "https://api.github.com/search/repositories?q=dplyr"
response <- GET(uri)body.data <- fromJSON(content(response, "text"))
# extract and parse# is it a data frame already?
is.data.frame(body.data)  # FALSE
# inspect the data!
str(body.data)
# a GitHub search for
uri <- "https://api.github.com/search/repositories?q=dplyr"
response <- GET(uri)
body.data <- fromJSON(content(response, "text"))
# extract and parse# is it a data frame already?
is.data.frame(body.data)  # FALSE
# inspect the data!
str(body.data)
# view as a formatted string
names(body.data)  # view the tag name
# extract the (useful) data
items <- body.data$items
# extract from the list
is.data.frame(items)
# inspect the data!
str(body.data)
# extract the (useful) data
items <- body.data$items
# extract from the list
is.data.frame(items)
#Legislative Data Overview
```{r echo=FALSE}
install.packages("ggplot2")
library("ggplot2")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
mpg
distinct(car, .keep_all = TRUE)
library("dpylr")
library("dplyr")
distinct(car, .keep_all = TRUE)
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
View(new.cars)
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) #%>%
View(new.cars)
new.cars <- mpg %>%
mutate(car = paste(manufacturer, model)) %>%
distinct(car, .keep_all = TRUE) %>%
slice(1:20)
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = drv), position = "dodge")
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = drv), position = "fill")
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
library("ggplot2")
colnames(diamonds)
nrow(diamonds)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# Draw a scatter plot (with point geometry) with for the `diamonds.sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price))
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
library("dplyr")
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds.sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds.sample)
# Draw a scatter plot (with point geometry) with for the `diamonds.sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color=clarity))
# Draw another scatter plot for `diamonds.sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), color="blue")
# Draw a scatter plot for `diamonds.sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, shape=cut))
# Draw a scatter plot for `diamonds.sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, size=price))
View(diamons)
View(diamonds)
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, size=price, color=price))
# Draw a line plot (with line geometry) for `diamonds.sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, color=cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, fill=clarity))
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
ggplot(data = diamonds.sample) +
geom_histogram(aes(x=depth, fill=clarity))
# Draw a plot of the `diamonds.sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=FALSE)
install.packages("ggplot2")
library("ggplot2")
library("dplyr")
ggplot(data = mpg) +
geom_map(mapping = aes(x = displ, y = hwy))
shiny::runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
library(rlang)
runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
?round
runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
runApp('Desktop/info201/a7-data-app-PhilipChoiFelipe')
setwd("~/Desktop/Final-Project")
shiny::runApp()
View(state.name)
state.name <- state2abbr(state.map$region)
View(state.name)
library("ggplot2")
library(dplyr)
library("maps")
library(shiny)
source("spatial_utils.R")
#install.packages("openintro")
library("openintro")
crime.data <- read.csv("data/report.csv",  fileEncoding="UTF-8-BOM")
state.map <- map_data("state")
#View(crime.data)
crime.data$agency_code <- substr(crime.data$agency_code, 0, 2)
View(crime.data)
View(state.name)
#View(crime.data)
crime.data$agency_code <- substr(crime.data$agency_code, 0, 2)
state.name <- state2abbr(state.map$region)
View(state.name)
state.map <- state.map %>% mutate(state.name)
View(state.map)
data.state.map <- left_join(state.map, crime.data, by = c("state.name" = "agency_code"))
View(data.state.map)
runApp()
runApp()
View(state.map)
#iew(crime.data)
crime.data$agency_code <- substr(crime.data$agency_code, 0, 2)
View(crime.data)
View(crime.data)
library("ggplot2")
library(dplyr)
library("maps")
library(shiny)
source("spatial_utils.R")
#install.packages("openintro")
library("openintro")
crime.data <- read.csv("data/report.csv",  fileEncoding="UTF-8-BOM")
View(crime.data)
runApp()
runApp()
runApp()
install.packages("mapproj")
install.packages("ggmap")
install.packages("DeducerSpatial")
map("county")
View(map("county"))
runApp()
#year.map <- year.map %>% mutate(year.sym = year.specific)
#Uses ggplot to draw the map. Colors the different parts of world by its magnitude of CO2 emission.
?geom_polygon
View(crime.data)
